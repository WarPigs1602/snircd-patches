 diff -r e1de3d14c9df include/handlers.h
--- a/include/handlers.h	Sat Jul 20 09:18:24 2013 +0200
+++ b/include/handlers.h	Sat Jul 20 09:23:57 2013 +0200
@@ -146,6 +146,7 @@
 extern int m_unregistered(struct Client*, struct Client*, int, char*[]);
 extern int m_unsupported(struct Client*, struct Client*, int, char*[]);
 extern int m_user(struct Client*, struct Client*, int, char*[]);
+extern int m_webirc(struct Client*, struct Client*, int, char*[]);
 extern int m_userhost(struct Client*, struct Client*, int, char*[]);
 extern int m_userip(struct Client*, struct Client*, int, char*[]);
 extern int m_version(struct Client*, struct Client*, int, char*[]);
diff -r e1de3d14c9df include/msg.h
--- a/include/msg.h	Sat Jul 20 09:18:24 2013 +0200
+++ b/include/msg.h	Sat Jul 20 09:23:57 2013 +0200
@@ -68,6 +68,11 @@
 #define TOK_USER                "USER"
 #define CMD_USER		MSG_USER, TOK_USER
 
+#define MSG_WEBIRC              "WEBIRC"        /* WEBI */
+#define TOK_WEBIRC              "WEBIRC"
+#define CMD_WEBIRC              MSG_WEBIRC, TOK_WEBIRC
+
+
 #define MSG_NICK                "NICK"          /* NICK */
 #define TOK_NICK                "N"
 #define CMD_NICK		MSG_NICK, TOK_NICK
diff -r e1de3d14c9df include/s_auth.h
--- a/include/s_auth.h	Sat Jul 20 09:18:24 2013 +0200
+++ b/include/s_auth.h	Sat Jul 20 09:23:57 2013 +0200
@@ -32,9 +32,11 @@
 struct Client;
 struct AuthRequest;
 struct StatDesc;
+struct irc_in_addr;
 
 extern void start_auth(struct Client *);
 extern int auth_ping_timeout(struct Client *);
+extern int auth_set_webirc(struct AuthRequest *auth, const char *password, const char *username, const char *hostname, struct irc_in_addr *ip);
 extern int auth_set_pong(struct AuthRequest *auth, unsigned int cookie);
 extern int auth_set_user(struct AuthRequest *auth, const char *username, const char *hostname, const char *servername, const char *userinfo);
 extern int auth_set_nick(struct AuthRequest *auth, const char *nickname);
diff --git a/ircd/Makefile.in b/ircd/Makefile.in
index 01a5ea6..430b4be 100644
--- a/ircd/Makefile.in
+++ b/ircd/Makefile.in
@@ -185,6 +185,7 @@ IRCD_SRC = \
 	m_wallops.c \
 	m_wallusers.c \
 	m_wallvoices.c \
+	m_webirc.c \
 	m_who.c \
 	m_whois.c \
 	m_whowas.c \
diff --git a/ircd/channel.c b/ircd/channel.c
index fdb3c25..1c6fcb0 100644
--- a/ircd/channel.c
+++ b/ircd/channel.c
@@ -374,18 +374,27 @@ struct Ban *find_ban(struct Client *cptr, struct Ban *banlist)
   char        tmphost[HOSTLEN + 1];
   char        iphost[SOCKIPLEN + 1];
   char       *hostmask;
-  char       *sr;
+  char       *sr = NULL;
+  char       *rh = NULL;
   struct Ban *found;
 
   /* Build nick!user and alternate host names. */
   ircd_snprintf(0, nu, sizeof(nu), "%s!%s",
                 cli_name(cptr), cli_user(cptr)->username);
   ircd_ntoa_r(iphost, &cli_ip(cptr));
-  if (!IsAccount(cptr))
-    sr = NULL;
-  else if (HasHiddenHost(cptr) || HasSetHost(cptr))
-    sr = cli_user(cptr)->realhost;
-  else
+
+  /* We basically need to check for three things;
+      * Their host (->host) which is always checked
+      * Their real host (->realhost, incase they're +x or +h)
+      * Their hidden host (if they're authed and not +x'd, or +x and +h)
+  */
+  /* If what we're seeing isn't their real host, also check that one */
+  if (HasHiddenHost(cptr) || HasSetHost(cptr))
+    rh = cli_user(cptr)->realhost;
+
+  /* If they're authed but not +x'd, also check the hidden host */
+  /* +h overrides +x */
+  if (IsAccount(cptr) && (!HasHiddenHost(cptr) || (HasHiddenHost(cptr) && HasSetHost(cptr))))
   {
     ircd_snprintf(0, tmphost, HOSTLEN, "%s.%s",
                   cli_user(cptr)->account, feature_str(FEAT_HIDDEN_HOST));
@@ -409,7 +418,8 @@ struct Ban *find_ban(struct Client *cptr, struct Ban *banlist)
     if (!((banlist->flags & BAN_IPMASK)
          && ipmask_check(&cli_ip(cptr), &banlist->address, banlist->addrbits))
         && match(hostmask, cli_user(cptr)->host)
-        && !(sr && !match(hostmask, sr)))
+        && !(sr && !match(hostmask, sr))
+        && !(rh && !match(hostmask, rh)))
         continue;
     /* If an exception matches, no ban can match. */
     if (banlist->flags & BAN_EXCEPTION)
diff --git a/ircd/gline.c b/ircd/gline.c
index b68225d..5da3f21 100644
--- a/ircd/gline.c
+++ b/ircd/gline.c
@@ -209,7 +209,7 @@ make_gline(char *nick, char *user, char *host, char *reason, time_t expire, time
  * @param[in] gline New G-line to check.
  * @return Zero, unless \a sptr G-lined himself, in which case CPTR_KILLED.
  */
-static int
+int
 do_gline(struct Client *cptr, struct Client *sptr, struct Gline *gline)
 {
   struct Client *acptr;
@@ -260,13 +260,14 @@ do_gline(struct Client *cptr, struct Client *sptr, struct Gline *gline)
           if (cli_user(acptr)->username &&
               match(gline->gl_user, (cli_user(acptr))->realusername) != 0)
             continue;
-
+	  
           if (GlineIsIpMask(gline)) {
             if (!ipmask_check(&cli_ip(acptr), &gline->gl_addr, gline->gl_bits))
               continue;
           }
           else {
-            if (match(gline->gl_host, cli_sockhost(acptr)) != 0)
+			/* G-Line fix for setted hosts */
+            if (match(gline->gl_host, cli_user(acptr)->host) != 0)
               continue;
           }
         }
@@ -418,7 +419,7 @@ gline_add(struct Client *cptr, struct Client *sptr, char *userhost,
 {
   struct Gline *agline;
   char uhmask[NICKLEN + USERLEN + HOSTLEN + 3];
-  char *nick, *user, *host;
+  char *nick, *user, *host, *realhost;
   int tmp;
 
   assert(0 != userhost);
diff --git a/ircd/m_sethost.c b/ircd/m_sethost.c
index f95bc31..68dc3af 100644
--- a/ircd/m_sethost.c
+++ b/ircd/m_sethost.c
@@ -82,6 +82,7 @@
 #include "config.h"
 
 #include "client.h"
+#include "gline.h"
 #include "ircd_reply.h"
 #include "ircd_string.h"
 #include "ircd_snprintf.h"
@@ -158,7 +159,8 @@ int m_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
       }
       if (set_hostmask(sptr, parv[1], parv[2]))
         FlagClr(&setflags, FLAG_SETHOST);
-    }
+	}
+	
   }  
 
   send_umode_out(cptr, sptr, &setflags, 0);
@@ -180,6 +182,7 @@ int ms_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
   char hostmask[USERLEN + HOSTLEN + 2];
   struct Membership *chan;
   struct Flags setflags;
+  struct Gline *gline;
 
   if (parc < 4)
     return need_more_params(sptr, "SETHOST");
@@ -214,14 +217,13 @@ int ms_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
   ircd_snprintf(0, hostmask, USERLEN + HOSTLEN + 2, "%s@%s", parv[2], parv[3]);
   if (!is_hostmask(hostmask))
     return protocol_violation(cptr, "Bad Host mask %s for user %s", hostmask, cli_name(target));
-
   sendcmdto_common_channels_butone(target, CMD_QUIT, target, ":Host change");
 
   /* Assign and propagate the fakehost */
   SetSetHost(target);
   ircd_strncpy(cli_user(target)->username, parv[2], USERLEN);
   ircd_strncpy(cli_user(target)->host, parv[3], HOSTLEN);
-  
+
   send_reply(target, RPL_HOSTHIDDEN, hostmask);
 
   /*
@@ -251,5 +253,11 @@ int ms_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
   }
 
   send_umode_out(target, target, &setflags, 0);
+  
+  /* G-Line fix for setted hosts */
+  if ((gline = gline_find(parv[3], GLINE_ANY | GLINE_EXACT)) != 0) {
+	 do_gline(cptr, sptr, gline);
+	 return 0;
+  }
   return 0;
 }
diff --git a/ircd/parse.c b/ircd/parse.c
index dd56879..06d1596 100644
--- a/ircd/parse.c
+++ b/ircd/parse.c
@@ -281,6 +281,13 @@ struct Message msgtab[] = {
     /* UNREG, CLIENT, SERVER, OPER, SERVICE */
     { m_user, m_registered, m_ignore, m_registered, m_ignore }
   },
+  {
+    MSG_WEBIRC,
+    TOK_WEBIRC,
+    0, MAXPARA, MFLG_SLOW, 0, NULL,
+    /* UNREG, CLIENT, SERVER, OPER, SERVICE */
+    { m_webirc, m_registered, m_ignore, m_registered, m_ignore }
+  },
   {
     MSG_AWAY,
     TOK_AWAY,
diff --git a/ircd/s_auth.c b/ircd/s_auth.c
index bfd58c0..c1db48a 100644
--- a/ircd/s_auth.c
+++ b/ircd/s_auth.c
@@ -201,6 +201,8 @@ struct IAuth {
 
 /** Active instance of IAuth. */
 static struct IAuth *iauth;
+/** IAuth respawn timer. */
+static struct Timer iauth_spawn_timer;
 /** Freelist of AuthRequest structures. */
 static struct AuthRequest *auth_freelist;
 
@@ -1014,6 +1016,23 @@ int auth_set_pong(struct AuthRequest *auth, unsigned int cookie)
   return check_auth_finished(auth);
 }
 
+int auth_set_webirc(struct AuthRequest *auth, const char *password, const char *username, const char *hostname, struct irc_in_addr *ip)
+{
+  struct Client *cptr;
+
+  assert(auth != NULL);
+
+  cptr = auth->client;
+
+  if (!FlagHas(&auth->flags, AR_NEEDS_NICK) || !FlagHas(&auth->flags, AR_NEEDS_USER))
+    return exit_client(cptr, cptr, &me, "WEBIRC must not be used after USER or NICK");
+
+  if (IAuthHas(iauth, IAUTH_UNDERNET))
+    sendto_iauth(cptr, "W %s %s %s %s", password, username, hostname, ircd_ntoa(ip));
+
+  return 0;
+}
+
 /** Record a user's claimed username and userinfo.
  * @param[in] auth Authorization request for client.
  * @param[in] username Client's asserted username.
@@ -2063,6 +2082,18 @@ static void iauth_read(struct IAuth *iauth)
   memcpy(iauth->i_buffer, sol, iauth->i_count);
 }
 
+static void iauth_spawn_callback(struct Event *ev)
+{
+  struct IAuth *iauth;
+
+  assert(0 != ev_timer(ev));
+  assert(0 != t_data(ev_timer(ev)));
+
+  iauth = (struct IAuth*) t_data(ev_timer(ev));
+
+  iauth_do_spawn(iauth, 1);
+}
+
 /** Handle socket activity for an %IAuth connection.
  * @param[in] ev &Socket event; the IAuth connection is the user data
  *   pointer for the socket.
@@ -2078,8 +2109,13 @@ static void iauth_sock_callback(struct Event *ev)
   switch (ev_type(ev)) {
   case ET_DESTROY:
     /* Hm, what happened here? */
-    if (!IAuthHas(iauth, IAUTH_CLOSING))
-      iauth_do_spawn(iauth, 1);
+    if (!IAuthHas(iauth, IAUTH_CLOSING)) {
+      /* We must not respawn the IAuth instance right here because this callback
+       * function may have been called by iauth_disconnect() - which would garble our
+       * IAuth sockets once we return from this function. */
+      timer_add(timer_init(&iauth_spawn_timer), iauth_spawn_callback, (void *)iauth,
+        TT_RELATIVE, 1);
+    }
     break;
   case ET_READ:
     iauth_read(iauth);

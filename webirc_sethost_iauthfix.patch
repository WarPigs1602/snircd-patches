commit 4b02104183bfd6934c2808890e6d14cc7ef75ea6
Author: Andreas Pschorn <source@midiandmore.de>
Date:   Sat Jan 11 13:15:27 2025 +0100

    Added G-line for authed users

diff --git a/configure b/configure
index e074b31..d803b41 100755
--- a/configure
+++ b/configure
@@ -10733,6 +10733,10 @@ if test x"$unet_maxcon" = xunlimited; then
     unet_maxcon=`ulimit -Sn`
 fi
 unet_maxcon=`expr $unet_maxcon - 4`
+NN_MAX_CLIENT_P=262168
+if test "$unet_maxcon" -gt $NN_MAX_CLIENT_P ; then
+    unet_maxcon=$NN_MAX_CLIENT_P
+fi
 echo "$as_me:$LINENO: checking max connections" >&5
 echo $ECHO_N "checking max connections... $ECHO_C" >&6
 
diff --git a/configure.in b/configure.in
index 025a7b6..c47d439 100644
--- a/configure.in
+++ b/configure.in
@@ -702,6 +702,10 @@ if test x"$unet_maxcon" = xunlimited; then
     unet_maxcon=`ulimit -Sn`
 fi
 unet_maxcon=`expr $unet_maxcon - 4`
+NN_MAX_CLIENT_P=262168
+if test "$unet_maxcon" -gt $NN_MAX_CLIENT_P ; then
+    unet_maxcon=$NN_MAX_CLIENT_P
+fi
 AC_MSG_CHECKING([max connections])
 AC_ARG_WITH([maxcon],
 [  --with-maxcon=maxcon    Maximum number of connections server will accept],
diff --git a/include/gline.h b/include/gline.h
index 502cd42..689a077 100644
--- a/include/gline.h
+++ b/include/gline.h
@@ -116,6 +116,7 @@ extern int gline_resend(struct Client *cptr, struct Gline *gline);
 extern int gline_list(struct Client *sptr, char *userhost);
 extern void gline_stats(struct Client *sptr, const struct StatDesc *sd,
                         char *param);
+extern int do_user_gline(struct Client *cptr, struct Client *sptr, struct Gline *gline);
 extern int gline_memory_count(size_t *gl_size);
 extern struct Gline *IsNickGlined(struct Client *cptr, char *nick);
 
diff --git a/include/handlers.h b/include/handlers.h
index a468201..c9c8448 100644
--- a/include/handlers.h
+++ b/include/handlers.h
@@ -146,6 +146,7 @@ extern int m_trace(struct Client*, struct Client*, int, char*[]);
 extern int m_unregistered(struct Client*, struct Client*, int, char*[]);
 extern int m_unsupported(struct Client*, struct Client*, int, char*[]);
 extern int m_user(struct Client*, struct Client*, int, char*[]);
+extern int m_webirc(struct Client*, struct Client*, int, char*[]);
 extern int m_userhost(struct Client*, struct Client*, int, char*[]);
 extern int m_userip(struct Client*, struct Client*, int, char*[]);
 extern int m_version(struct Client*, struct Client*, int, char*[]);
diff --git a/include/msg.h b/include/msg.h
index f0ebe3c..c4fe19c 100644
--- a/include/msg.h
+++ b/include/msg.h
@@ -68,6 +68,11 @@ struct Client;
 #define TOK_USER                "USER"
 #define CMD_USER		MSG_USER, TOK_USER
 
+#define MSG_WEBIRC              "WEBIRC"        /* WEBI */
+#define TOK_WEBIRC              "WEBIRC"
+#define CMD_WEBIRC              MSG_WEBIRC, TOK_WEBIRC
+
+
 #define MSG_NICK                "NICK"          /* NICK */
 #define TOK_NICK                "N"
 #define CMD_NICK		MSG_NICK, TOK_NICK
diff --git a/include/s_auth.h b/include/s_auth.h
index ce25827..8297840 100644
--- a/include/s_auth.h
+++ b/include/s_auth.h
@@ -32,9 +32,11 @@
 struct Client;
 struct AuthRequest;
 struct StatDesc;
+struct irc_in_addr;
 
 extern void start_auth(struct Client *);
 extern int auth_ping_timeout(struct Client *);
+extern int auth_set_webirc(struct AuthRequest *auth, const char *password, const char *username, const char *hostname, struct irc_in_addr *ip);
 extern int auth_set_pong(struct AuthRequest *auth, unsigned int cookie);
 extern int auth_set_user(struct AuthRequest *auth, const char *username, const char *hostname, const char *servername, const char *userinfo);
 extern int auth_set_nick(struct AuthRequest *auth, const char *nickname);
diff --git a/include/struct.h b/include/struct.h
index 16d9f8e..5f00e26 100644
--- a/include/struct.h
+++ b/include/struct.h
@@ -83,7 +83,10 @@ struct User {
   char               host[HOSTLEN + 1];         /**< displayed hostname */
   char               realusername[USERLEN + 1]; /**< actual username */
   char               realhost[HOSTLEN + 1];     /**< actual hostname */
-  char               account[ACCOUNTLEN + 1];   /**< IRC account name */
+  char               account[ACCOUNTLEN + 1];   /**< actual hostname */
+  char               authhost[ACCOUNTLEN + HOSTLEN + 2];    /**< actual hostname */
+
+  /**< IRC account name */
   time_t	     acc_create;                /**< IRC account timestamp */
   unsigned long       acc_id;                    /**< IRC account unique id */
   char*              opername;                  /**< IRC Oper Account name */
diff --git a/ircd/Makefile.in b/ircd/Makefile.in
index 01a5ea6..430b4be 100644
--- a/ircd/Makefile.in
+++ b/ircd/Makefile.in
@@ -185,6 +185,7 @@ IRCD_SRC = \
 	m_wallops.c \
 	m_wallusers.c \
 	m_wallvoices.c \
+	m_webirc.c \
 	m_who.c \
 	m_whois.c \
 	m_whowas.c \
diff --git a/ircd/channel.c b/ircd/channel.c
index fdb3c25..1c6fcb0 100644
--- a/ircd/channel.c
+++ b/ircd/channel.c
@@ -374,18 +374,27 @@ struct Ban *find_ban(struct Client *cptr, struct Ban *banlist)
   char        tmphost[HOSTLEN + 1];
   char        iphost[SOCKIPLEN + 1];
   char       *hostmask;
-  char       *sr;
+  char       *sr = NULL;
+  char       *rh = NULL;
   struct Ban *found;
 
   /* Build nick!user and alternate host names. */
   ircd_snprintf(0, nu, sizeof(nu), "%s!%s",
                 cli_name(cptr), cli_user(cptr)->username);
   ircd_ntoa_r(iphost, &cli_ip(cptr));
-  if (!IsAccount(cptr))
-    sr = NULL;
-  else if (HasHiddenHost(cptr) || HasSetHost(cptr))
-    sr = cli_user(cptr)->realhost;
-  else
+
+  /* We basically need to check for three things;
+      * Their host (->host) which is always checked
+      * Their real host (->realhost, incase they're +x or +h)
+      * Their hidden host (if they're authed and not +x'd, or +x and +h)
+  */
+  /* If what we're seeing isn't their real host, also check that one */
+  if (HasHiddenHost(cptr) || HasSetHost(cptr))
+    rh = cli_user(cptr)->realhost;
+
+  /* If they're authed but not +x'd, also check the hidden host */
+  /* +h overrides +x */
+  if (IsAccount(cptr) && (!HasHiddenHost(cptr) || (HasHiddenHost(cptr) && HasSetHost(cptr))))
   {
     ircd_snprintf(0, tmphost, HOSTLEN, "%s.%s",
                   cli_user(cptr)->account, feature_str(FEAT_HIDDEN_HOST));
@@ -409,7 +418,8 @@ struct Ban *find_ban(struct Client *cptr, struct Ban *banlist)
     if (!((banlist->flags & BAN_IPMASK)
          && ipmask_check(&cli_ip(cptr), &banlist->address, banlist->addrbits))
         && match(hostmask, cli_user(cptr)->host)
-        && !(sr && !match(hostmask, sr)))
+        && !(sr && !match(hostmask, sr))
+        && !(rh && !match(hostmask, rh)))
         continue;
     /* If an exception matches, no ban can match. */
     if (banlist->flags & BAN_EXCEPTION)
diff --git a/ircd/gline.c b/ircd/gline.c
index b68225d..90f5fd6 100644
--- a/ircd/gline.c
+++ b/ircd/gline.c
@@ -201,6 +201,29 @@ make_gline(char *nick, char *user, char *host, char *reason, time_t expire, time
   return gline;
 }
 
+/** G-line for current user.
+ * If the G-line is inactive, return immediately.
+ * Otherwise, if any users match it, disconnect them.
+ * @param[in] cptr Peer connect that sent the G-line.
+ * @param[in] sptr Client that originated the G-line.
+ * @param[in] gline G-line to check.
+ * @return Zero, unless \a sptr G-lined himself, in which case CPTR_KILLED.
+ */
+int
+do_user_gline(struct Client *cptr, struct Client *sptr, struct Gline *gline)
+{
+    /* ok, here's one that got G-lined */
+    send_reply(sptr, SND_EXPLICIT | ERR_YOUREBANNEDCREEP, ":%s",
+        	   gline->gl_reason);
+
+    /* let the ops know about it */
+    sendto_opmask_butone(0, SNO_GLINE, "G-line active for %s",
+                             get_client_name(sptr, SHOW_IP));
+							 
+    /* Exits victim */
+    return exit_client_msg(cptr, sptr, &me, "G-lined (%s)", gline->gl_reason);
+}
+
 /** Check local clients against a new G-line.
  * If the G-line is inactive, return immediately.
  * Otherwise, if any users match it, disconnect them or kick them if the G-line is a BADCHAN.
@@ -260,28 +283,20 @@ do_gline(struct Client *cptr, struct Client *sptr, struct Gline *gline)
           if (cli_user(acptr)->username &&
               match(gline->gl_user, (cli_user(acptr))->realusername) != 0)
             continue;
-
+	  
           if (GlineIsIpMask(gline)) {
             if (!ipmask_check(&cli_ip(acptr), &gline->gl_addr, gline->gl_bits))
               continue;
           }
           else {
-            if (match(gline->gl_host, cli_sockhost(acptr)) != 0)
+			/* G-Line fix for setted hosts */
+            if (match(gline->gl_host, cli_user(acptr)->host) != 0 && match(gline->gl_host, cli_sockhost(acptr)) != 0 && match(gline->gl_host, cli_user(acptr)->authhost) != 0)
               continue;
           }
         }
-
-        /* ok, here's one that got G-lined */
-        send_reply(acptr, SND_EXPLICIT | ERR_YOUREBANNEDCREEP, ":%s",
-        	   gline->gl_reason);
-
-        /* let the ops know about it */
-        sendto_opmask_butone(0, SNO_GLINE, "G-line active for %s",
-                             get_client_name(acptr, SHOW_IP));
-
-        /* and get rid of him */
-        if ((tval = exit_client_msg(cptr, acptr, &me, "G-lined (%s)", gline->gl_reason))) 
-        retval = tval; /* retain killed status */
+        
+		/* Modified to user gline */
+        retval = do_user_gline(cptr, acptr, gline);
       }
     }
   }
@@ -418,7 +433,7 @@ gline_add(struct Client *cptr, struct Client *sptr, char *userhost,
 {
   struct Gline *agline;
   char uhmask[NICKLEN + USERLEN + HOSTLEN + 3];
-  char *nick, *user, *host;
+  char *nick, *user, *host, *realhost;
   int tmp;
 
   assert(0 != userhost);
diff --git a/ircd/m_account.c b/ircd/m_account.c
index 9ceae55..176edf0 100644
--- a/ircd/m_account.c
+++ b/ircd/m_account.c
@@ -81,13 +81,17 @@
 #include "config.h"
 
 #include "client.h"
+#include "gline.h"
 #include "ircd.h"
+#include "ircd_features.h"
 #include "ircd_log.h"
 #include "ircd_reply.h"
 #include "ircd_string.h"
 #include "msg.h"
+#include "numeric.h"
 #include "numnicks.h"
 #include "s_debug.h"
+#include "s_misc.h"
 #include "s_user.h"
 #include "send.h"
 
@@ -108,6 +112,7 @@ int ms_account(struct Client* cptr, struct Client* sptr, int parc,
 	       char* parv[])
 {
   struct Client *acptr;
+  struct Gline *gline;
 
   if (parc < 3)
     return need_more_params(sptr, "ACCOUNT");
@@ -159,8 +164,7 @@ int ms_account(struct Client* cptr, struct Client* sptr, int parc,
   }
 
   ircd_strncpy(cli_user(acptr)->account, parv[2], ACCOUNTLEN);
-  hide_hostmask(acptr, FLAG_ACCOUNT);
-
+    hide_hostmask(acptr, FLAG_ACCOUNT);
    if (cli_user(acptr)->acc_id) {
      sendcmdto_serv_butone(sptr, CMD_ACCOUNT, cptr, "%C %s %Tu %lu",
                            acptr, cli_user(acptr)->account,
@@ -174,6 +178,12 @@ int ms_account(struct Client* cptr, struct Client* sptr, int parc,
      sendcmdto_serv_butone(sptr, CMD_ACCOUNT, cptr, "%C %s",
                            acptr, cli_user(acptr)->account);
    }
-
+  /* G-Line fix for accounts */
+  strcpy(cli_user(acptr)->authhost, parv[2]);
+  strcat(cli_user(acptr)->authhost, ".");
+  strcat(cli_user(acptr)->authhost, feature_str(FEAT_HIDDEN_HOST));	
+  if ((gline = gline_find(cli_user(acptr)->authhost, GLINE_ANY | GLINE_EXACT)) != 0) {
+	  do_user_gline(cptr, acptr, gline);
+  }
   return 0;
 }
diff --git a/ircd/m_sethost.c b/ircd/m_sethost.c
index f95bc31..d0aa3a5 100644
--- a/ircd/m_sethost.c
+++ b/ircd/m_sethost.c
@@ -82,6 +82,7 @@
 #include "config.h"
 
 #include "client.h"
+#include "gline.h"
 #include "ircd_reply.h"
 #include "ircd_string.h"
 #include "ircd_snprintf.h"
@@ -158,7 +159,8 @@ int m_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
       }
       if (set_hostmask(sptr, parv[1], parv[2]))
         FlagClr(&setflags, FLAG_SETHOST);
-    }
+	}
+	
   }  
 
   send_umode_out(cptr, sptr, &setflags, 0);
@@ -180,6 +182,7 @@ int ms_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
   char hostmask[USERLEN + HOSTLEN + 2];
   struct Membership *chan;
   struct Flags setflags;
+  struct Gline *gline;
 
   if (parc < 4)
     return need_more_params(sptr, "SETHOST");
@@ -214,14 +217,13 @@ int ms_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
   ircd_snprintf(0, hostmask, USERLEN + HOSTLEN + 2, "%s@%s", parv[2], parv[3]);
   if (!is_hostmask(hostmask))
     return protocol_violation(cptr, "Bad Host mask %s for user %s", hostmask, cli_name(target));
-
   sendcmdto_common_channels_butone(target, CMD_QUIT, target, ":Host change");
 
   /* Assign and propagate the fakehost */
   SetSetHost(target);
   ircd_strncpy(cli_user(target)->username, parv[2], USERLEN);
   ircd_strncpy(cli_user(target)->host, parv[3], HOSTLEN);
-  
+
   send_reply(target, RPL_HOSTHIDDEN, hostmask);
 
   /*
@@ -251,5 +253,10 @@ int ms_sethost(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
   }
 
   send_umode_out(target, target, &setflags, 0);
+  
+  /* G-Line fix for setted hosts */
+  if ((gline = gline_find(parv[3], GLINE_ANY | GLINE_EXACT)) != 0) {
+	 return do_user_gline(cptr, target, gline);
+  }
   return 0;
 }
diff --git a/ircd/m_webirc.c b/ircd/m_webirc.c
new file mode 100644
index 0000000..3bd5c1c
--- /dev/null
+++ b/ircd/m_webirc.c
@@ -0,0 +1,125 @@
+/*
+ * IRC - Internet Relay Chat, ircd/m_webirc.c
+ * Copyright (C) 1990 Jarkko Oikarinen and
+ *                    University of Oulu, Computing Center
+ *
+ * See file AUTHORS in IRC package for additional names of
+ * the programmers.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 1, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ * $Id: m_webirc.c,v 1.25 2005/09/13 15:17:46 entrope Exp $
+ */
+
+/*
+ * m_functions execute protocol messages on this server:
+ *
+ *    cptr    is always NON-NULL, pointing to a *LOCAL* client
+ *            structure (with an open socket connected!). This
+ *            identifies the physical socket where the message
+ *            originated (or which caused the m_function to be
+ *            executed--some m_functions may call others...).
+ *
+ *    sptr    is the source of the message, defined by the
+ *            prefix part of the message if present. If not
+ *            or prefix not found, then sptr==cptr.
+ *
+ *            (!IsServer(cptr)) => (cptr == sptr), because
+ *            prefixes are taken *only* from servers...
+ *
+ *            (IsServer(cptr))
+ *                    (sptr == cptr) => the message didn't
+ *                    have the prefix.
+ *
+ *                    (sptr != cptr && IsServer(sptr) means
+ *                    the prefix specified servername. (?)
+ *
+ *                    (sptr != cptr && !IsServer(sptr) means
+ *                    that message originated from a remote
+ *                    user (not local).
+ *
+ *            combining
+ *
+ *            (!IsServer(sptr)) means that, sptr can safely
+ *            taken as defining the target structure of the
+ *            message in this server.
+ *
+ *    *Always* true (if 'parse' and others are working correct):
+ *
+ *    1)      sptr->from == cptr  (note: cptr->from == cptr)
+ *
+ *    2)      MyConnect(sptr) <=> sptr == cptr (e.g. sptr
+ *            *cannot* be a local connection, unless it's
+ *            actually cptr!). [MyConnect(x) should probably
+ *            be defined as (x == x->from) --msa ]
+ *
+ *    parc    number of variable parameter strings (if zero,
+ *            parv is allowed to be NULL)
+ *
+ *    parv    a NULL terminated list of parameter pointers,
+ *
+ *                    parv[0], sender (prefix string), if not present
+ *                            this points to an empty string.
+ *                    parv[1]...parv[parc-1]
+ *                            pointers to additional parameters
+ *                    parv[parc] == NULL, *always*
+ *
+ *            note:   it is guaranteed that parv[0]..parv[parc-1] are all
+ *                    non-NULL pointers.
+ */
+#include "config.h"
+
+#include "channel.h"
+#include "client.h"
+#include "hash.h"
+#include "ircd.h"
+#include "ircd_features.h"
+#include "ircd_log.h"
+#include "ircd_reply.h"
+#include "ircd_string.h"
+#include "list.h"
+#include "msg.h"
+#include "numeric.h"
+#include "numnicks.h"
+#include "s_user.h"
+#include "s_auth.h"
+#include "s_misc.h"
+#include "send.h"
+#include "struct.h"
+
+/* #include <assert.h> -- Now using assert in ircd_log.h */
+
+/*
+ * ms_webirc - server message handler
+ *
+ *   parv[0] - sender prefix
+ *   parv[1] - password
+ *   parv[2] - fake username
+ *   parv[3] - fake hostname
+ *   parv[4] - fake ip address
+ *
+ */
+int m_webirc(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
+{
+  struct irc_in_addr ip;
+  
+  if (parc < 5 || EmptyString(parv[4]))
+    return need_more_params(sptr,"WEBIRC");
+
+  if (!ircd_aton(&ip, parv[4]))
+    return exit_client(cptr, cptr, &me, "Invalid IP address specified for WEBIRC");
+
+  return auth_set_webirc(cli_auth(cptr), parv[1], parv[2], parv[3], &ip);
+}
diff --git a/ircd/parse.c b/ircd/parse.c
index dd56879..06d1596 100644
--- a/ircd/parse.c
+++ b/ircd/parse.c
@@ -281,6 +281,13 @@ struct Message msgtab[] = {
     /* UNREG, CLIENT, SERVER, OPER, SERVICE */
     { m_user, m_registered, m_ignore, m_registered, m_ignore }
   },
+  {
+    MSG_WEBIRC,
+    TOK_WEBIRC,
+    0, MAXPARA, MFLG_SLOW, 0, NULL,
+    /* UNREG, CLIENT, SERVER, OPER, SERVICE */
+    { m_webirc, m_registered, m_ignore, m_registered, m_ignore }
+  },
   {
     MSG_AWAY,
     TOK_AWAY,
diff --git a/ircd/s_auth.c b/ircd/s_auth.c
index bfd58c0..c1db48a 100644
--- a/ircd/s_auth.c
+++ b/ircd/s_auth.c
@@ -201,6 +201,8 @@ struct IAuth {
 
 /** Active instance of IAuth. */
 static struct IAuth *iauth;
+/** IAuth respawn timer. */
+static struct Timer iauth_spawn_timer;
 /** Freelist of AuthRequest structures. */
 static struct AuthRequest *auth_freelist;
 
@@ -1014,6 +1016,23 @@ int auth_set_pong(struct AuthRequest *auth, unsigned int cookie)
   return check_auth_finished(auth);
 }
 
+int auth_set_webirc(struct AuthRequest *auth, const char *password, const char *username, const char *hostname, struct irc_in_addr *ip)
+{
+  struct Client *cptr;
+
+  assert(auth != NULL);
+
+  cptr = auth->client;
+
+  if (!FlagHas(&auth->flags, AR_NEEDS_NICK) || !FlagHas(&auth->flags, AR_NEEDS_USER))
+    return exit_client(cptr, cptr, &me, "WEBIRC must not be used after USER or NICK");
+
+  if (IAuthHas(iauth, IAUTH_UNDERNET))
+    sendto_iauth(cptr, "W %s %s %s %s", password, username, hostname, ircd_ntoa(ip));
+
+  return 0;
+}
+
 /** Record a user's claimed username and userinfo.
  * @param[in] auth Authorization request for client.
  * @param[in] username Client's asserted username.
@@ -2063,6 +2082,18 @@ static void iauth_read(struct IAuth *iauth)
   memcpy(iauth->i_buffer, sol, iauth->i_count);
 }
 
+static void iauth_spawn_callback(struct Event *ev)
+{
+  struct IAuth *iauth;
+
+  assert(0 != ev_timer(ev));
+  assert(0 != t_data(ev_timer(ev)));
+
+  iauth = (struct IAuth*) t_data(ev_timer(ev));
+
+  iauth_do_spawn(iauth, 1);
+}
+
 /** Handle socket activity for an %IAuth connection.
  * @param[in] ev &Socket event; the IAuth connection is the user data
  *   pointer for the socket.
@@ -2078,8 +2109,13 @@ static void iauth_sock_callback(struct Event *ev)
   switch (ev_type(ev)) {
   case ET_DESTROY:
     /* Hm, what happened here? */
-    if (!IAuthHas(iauth, IAUTH_CLOSING))
-      iauth_do_spawn(iauth, 1);
+    if (!IAuthHas(iauth, IAUTH_CLOSING)) {
+      /* We must not respawn the IAuth instance right here because this callback
+       * function may have been called by iauth_disconnect() - which would garble our
+       * IAuth sockets once we return from this function. */
+      timer_add(timer_init(&iauth_spawn_timer), iauth_spawn_callback, (void *)iauth,
+        TT_RELATIVE, 1);
+    }
     break;
   case ET_READ:
     iauth_read(iauth);
diff --git a/ircd/s_user.c b/ircd/s_user.c
index 7f28f0c..bad1a40 100644
--- a/ircd/s_user.c
+++ b/ircd/s_user.c
@@ -460,8 +460,9 @@ int register_user(struct Client *cptr, struct Client *sptr)
    * their hostmask here.  Calling hide_hostmask() from IAuth's
    * account assignment causes a numeric reply during registration.
    */
-  if (HasHiddenHost(sptr))
+  if (HasHiddenHost(sptr)) {
     hide_hostmask(sptr, FLAG_HIDDENHOST);
+  }
   if (IsInvisible(sptr))
     ++UserStats.inv_clients;
   if (IsOper(sptr))
@@ -953,7 +954,6 @@ int
 hide_hostmask(struct Client *cptr, unsigned int flag)
 {
   struct Membership *chan;
-
   switch (flag) {
   case FLAG_HIDDENHOST:
     /* Local users cannot set +x unless FEAT_HOST_HIDING is true. */
@@ -1233,7 +1233,6 @@ int set_user_mode(struct Client *cptr, struct Client *sptr, int parc,
   size_t opernamelen;
   char *opername = 0;
   char* account = NULL;
-
   hostmask = password = NULL;
   what = MODE_ADD;
 
@@ -1519,8 +1518,9 @@ int set_user_mode(struct Client *cptr, struct Client *sptr, int parc,
       }
       ircd_strncpy(cli_user(sptr)->account, account, len);
   }
-  if (!FlagHas(&setflags, FLAG_HIDDENHOST) && do_host_hiding && allow_modes != ALLOWMODES_DEFAULT)
+  if (!FlagHas(&setflags, FLAG_HIDDENHOST) && do_host_hiding && allow_modes != ALLOWMODES_DEFAULT) {
     hide_hostmask(sptr, FLAG_HIDDENHOST);
+  }
   if (do_set_host) {
     /* We clear the flag in the old mask, so that the +h will be sent */
     /* Only do this if we're SETTING +h and it succeeded */

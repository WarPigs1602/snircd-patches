From a5b5e7cf2bed5af321797cb80177d1abb6534281 Mon Sep 17 00:00:00 2001
From: Andreas Pschorn <source@midiandmore.de>
Date: Sun, 28 Jul 2024 17:03:03 +0200
Subject: [PATCH]  Auf Branch master  Ihr Branch ist auf demselben Stand wie
 'origin/master'.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

 Zum Commit vorgemerkte Änderungen:
	geändert:       include/handlers.h
	geändert:       include/msg.h
	geändert:       include/s_auth.h
	geändert:       ircd/Makefile.in
	neue Datei:     ircd/m_webirc.c
	geändert:       ircd/parse.c
	geändert:       ircd/s_auth.c
---
 include/handlers.h |   1 +
 include/msg.h      |   5 ++
 include/s_auth.h   |   2 +
 ircd/Makefile.in   |   1 +
 ircd/m_webirc.c    | 125 +++++++++++++++++++++++++++++++++++++++++++++
 ircd/parse.c       |   7 +++
 ircd/s_auth.c      |  40 ++++++++++++++-
 7 files changed, 179 insertions(+), 2 deletions(-)
 create mode 100644 ircd/m_webirc.c

diff --git a/include/handlers.h b/include/handlers.h
index a468201..c9c8448 100644
--- a/include/handlers.h
+++ b/include/handlers.h
@@ -146,6 +146,7 @@ extern int m_trace(struct Client*, struct Client*, int, char*[]);
 extern int m_unregistered(struct Client*, struct Client*, int, char*[]);
 extern int m_unsupported(struct Client*, struct Client*, int, char*[]);
 extern int m_user(struct Client*, struct Client*, int, char*[]);
+extern int m_webirc(struct Client*, struct Client*, int, char*[]);
 extern int m_userhost(struct Client*, struct Client*, int, char*[]);
 extern int m_userip(struct Client*, struct Client*, int, char*[]);
 extern int m_version(struct Client*, struct Client*, int, char*[]);
diff --git a/include/msg.h b/include/msg.h
index f0ebe3c..c4fe19c 100644
--- a/include/msg.h
+++ b/include/msg.h
@@ -68,6 +68,11 @@ struct Client;
 #define TOK_USER                "USER"
 #define CMD_USER		MSG_USER, TOK_USER
 
+#define MSG_WEBIRC              "WEBIRC"        /* WEBI */
+#define TOK_WEBIRC              "WEBIRC"
+#define CMD_WEBIRC              MSG_WEBIRC, TOK_WEBIRC
+
+
 #define MSG_NICK                "NICK"          /* NICK */
 #define TOK_NICK                "N"
 #define CMD_NICK		MSG_NICK, TOK_NICK
diff --git a/include/s_auth.h b/include/s_auth.h
index ce25827..8297840 100644
--- a/include/s_auth.h
+++ b/include/s_auth.h
@@ -32,9 +32,11 @@
 struct Client;
 struct AuthRequest;
 struct StatDesc;
+struct irc_in_addr;
 
 extern void start_auth(struct Client *);
 extern int auth_ping_timeout(struct Client *);
+extern int auth_set_webirc(struct AuthRequest *auth, const char *password, const char *username, const char *hostname, struct irc_in_addr *ip);
 extern int auth_set_pong(struct AuthRequest *auth, unsigned int cookie);
 extern int auth_set_user(struct AuthRequest *auth, const char *username, const char *hostname, const char *servername, const char *userinfo);
 extern int auth_set_nick(struct AuthRequest *auth, const char *nickname);
diff --git a/ircd/Makefile.in b/ircd/Makefile.in
index 01a5ea6..430b4be 100644
--- a/ircd/Makefile.in
+++ b/ircd/Makefile.in
@@ -185,6 +185,7 @@ IRCD_SRC = \
 	m_wallops.c \
 	m_wallusers.c \
 	m_wallvoices.c \
+	m_webirc.c \
 	m_who.c \
 	m_whois.c \
 	m_whowas.c \
diff --git a/ircd/m_webirc.c b/ircd/m_webirc.c
new file mode 100644
index 0000000..3bd5c1c
--- /dev/null
+++ b/ircd/m_webirc.c
@@ -0,0 +1,125 @@
+/*
+ * IRC - Internet Relay Chat, ircd/m_webirc.c
+ * Copyright (C) 1990 Jarkko Oikarinen and
+ *                    University of Oulu, Computing Center
+ *
+ * See file AUTHORS in IRC package for additional names of
+ * the programmers.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 1, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ * $Id: m_webirc.c,v 1.25 2005/09/13 15:17:46 entrope Exp $
+ */
+
+/*
+ * m_functions execute protocol messages on this server:
+ *
+ *    cptr    is always NON-NULL, pointing to a *LOCAL* client
+ *            structure (with an open socket connected!). This
+ *            identifies the physical socket where the message
+ *            originated (or which caused the m_function to be
+ *            executed--some m_functions may call others...).
+ *
+ *    sptr    is the source of the message, defined by the
+ *            prefix part of the message if present. If not
+ *            or prefix not found, then sptr==cptr.
+ *
+ *            (!IsServer(cptr)) => (cptr == sptr), because
+ *            prefixes are taken *only* from servers...
+ *
+ *            (IsServer(cptr))
+ *                    (sptr == cptr) => the message didn't
+ *                    have the prefix.
+ *
+ *                    (sptr != cptr && IsServer(sptr) means
+ *                    the prefix specified servername. (?)
+ *
+ *                    (sptr != cptr && !IsServer(sptr) means
+ *                    that message originated from a remote
+ *                    user (not local).
+ *
+ *            combining
+ *
+ *            (!IsServer(sptr)) means that, sptr can safely
+ *            taken as defining the target structure of the
+ *            message in this server.
+ *
+ *    *Always* true (if 'parse' and others are working correct):
+ *
+ *    1)      sptr->from == cptr  (note: cptr->from == cptr)
+ *
+ *    2)      MyConnect(sptr) <=> sptr == cptr (e.g. sptr
+ *            *cannot* be a local connection, unless it's
+ *            actually cptr!). [MyConnect(x) should probably
+ *            be defined as (x == x->from) --msa ]
+ *
+ *    parc    number of variable parameter strings (if zero,
+ *            parv is allowed to be NULL)
+ *
+ *    parv    a NULL terminated list of parameter pointers,
+ *
+ *                    parv[0], sender (prefix string), if not present
+ *                            this points to an empty string.
+ *                    parv[1]...parv[parc-1]
+ *                            pointers to additional parameters
+ *                    parv[parc] == NULL, *always*
+ *
+ *            note:   it is guaranteed that parv[0]..parv[parc-1] are all
+ *                    non-NULL pointers.
+ */
+#include "config.h"
+
+#include "channel.h"
+#include "client.h"
+#include "hash.h"
+#include "ircd.h"
+#include "ircd_features.h"
+#include "ircd_log.h"
+#include "ircd_reply.h"
+#include "ircd_string.h"
+#include "list.h"
+#include "msg.h"
+#include "numeric.h"
+#include "numnicks.h"
+#include "s_user.h"
+#include "s_auth.h"
+#include "s_misc.h"
+#include "send.h"
+#include "struct.h"
+
+/* #include <assert.h> -- Now using assert in ircd_log.h */
+
+/*
+ * ms_webirc - server message handler
+ *
+ *   parv[0] - sender prefix
+ *   parv[1] - password
+ *   parv[2] - fake username
+ *   parv[3] - fake hostname
+ *   parv[4] - fake ip address
+ *
+ */
+int m_webirc(struct Client* cptr, struct Client* sptr, int parc, char* parv[])
+{
+  struct irc_in_addr ip;
+  
+  if (parc < 5 || EmptyString(parv[4]))
+    return need_more_params(sptr,"WEBIRC");
+
+  if (!ircd_aton(&ip, parv[4]))
+    return exit_client(cptr, cptr, &me, "Invalid IP address specified for WEBIRC");
+
+  return auth_set_webirc(cli_auth(cptr), parv[1], parv[2], parv[3], &ip);
+}
diff --git a/ircd/parse.c b/ircd/parse.c
index dd56879..06d1596 100644
--- a/ircd/parse.c
+++ b/ircd/parse.c
@@ -281,6 +281,13 @@ struct Message msgtab[] = {
     /* UNREG, CLIENT, SERVER, OPER, SERVICE */
     { m_user, m_registered, m_ignore, m_registered, m_ignore }
   },
+  {
+    MSG_WEBIRC,
+    TOK_WEBIRC,
+    0, MAXPARA, MFLG_SLOW, 0, NULL,
+    /* UNREG, CLIENT, SERVER, OPER, SERVICE */
+    { m_webirc, m_registered, m_ignore, m_registered, m_ignore }
+  },
   {
     MSG_AWAY,
     TOK_AWAY,
diff --git a/ircd/s_auth.c b/ircd/s_auth.c
index bfd58c0..c1db48a 100644
--- a/ircd/s_auth.c
+++ b/ircd/s_auth.c
@@ -201,6 +201,8 @@ struct IAuth {
 
 /** Active instance of IAuth. */
 static struct IAuth *iauth;
+/** IAuth respawn timer. */
+static struct Timer iauth_spawn_timer;
 /** Freelist of AuthRequest structures. */
 static struct AuthRequest *auth_freelist;
 
@@ -1014,6 +1016,23 @@ int auth_set_pong(struct AuthRequest *auth, unsigned int cookie)
   return check_auth_finished(auth);
 }
 
+int auth_set_webirc(struct AuthRequest *auth, const char *password, const char *username, const char *hostname, struct irc_in_addr *ip)
+{
+  struct Client *cptr;
+
+  assert(auth != NULL);
+
+  cptr = auth->client;
+
+  if (!FlagHas(&auth->flags, AR_NEEDS_NICK) || !FlagHas(&auth->flags, AR_NEEDS_USER))
+    return exit_client(cptr, cptr, &me, "WEBIRC must not be used after USER or NICK");
+
+  if (IAuthHas(iauth, IAUTH_UNDERNET))
+    sendto_iauth(cptr, "W %s %s %s %s", password, username, hostname, ircd_ntoa(ip));
+
+  return 0;
+}
+
 /** Record a user's claimed username and userinfo.
  * @param[in] auth Authorization request for client.
  * @param[in] username Client's asserted username.
@@ -2063,6 +2082,18 @@ static void iauth_read(struct IAuth *iauth)
   memcpy(iauth->i_buffer, sol, iauth->i_count);
 }
 
+static void iauth_spawn_callback(struct Event *ev)
+{
+  struct IAuth *iauth;
+
+  assert(0 != ev_timer(ev));
+  assert(0 != t_data(ev_timer(ev)));
+
+  iauth = (struct IAuth*) t_data(ev_timer(ev));
+
+  iauth_do_spawn(iauth, 1);
+}
+
 /** Handle socket activity for an %IAuth connection.
  * @param[in] ev &Socket event; the IAuth connection is the user data
  *   pointer for the socket.
@@ -2078,8 +2109,13 @@ static void iauth_sock_callback(struct Event *ev)
   switch (ev_type(ev)) {
   case ET_DESTROY:
     /* Hm, what happened here? */
-    if (!IAuthHas(iauth, IAUTH_CLOSING))
-      iauth_do_spawn(iauth, 1);
+    if (!IAuthHas(iauth, IAUTH_CLOSING)) {
+      /* We must not respawn the IAuth instance right here because this callback
+       * function may have been called by iauth_disconnect() - which would garble our
+       * IAuth sockets once we return from this function. */
+      timer_add(timer_init(&iauth_spawn_timer), iauth_spawn_callback, (void *)iauth,
+        TT_RELATIVE, 1);
+    }
     break;
   case ET_READ:
     iauth_read(iauth);
-- 
2.34.1

